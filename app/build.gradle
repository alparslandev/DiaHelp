apply plugin: 'com.android.application'

apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'realm-android'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'com.diahelp'
        minSdkVersion 21
        targetSdkVersion 28
        versionName getBuildVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:28.0.0'

    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.google.firebase:firebase-auth:16.1.0'
    implementation 'com.google.android.gms:play-services-auth:16.0.1'
    implementation 'com.google.firebase:firebase-database:16.1.0'
    testİmplementation 'junit:junit:4.12'
    androidTestİmplementation 'com.android.support.test:runner:1.0.2'
    androidTestİmplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}


def getPropertiesFile() {
    return file("${project.rootDir}/gradle.properties")
}

def getBuildVersionName() {
    Properties properties = new Properties()
    def propsFile = getPropertiesFile()
    if (propsFile.canRead()) {

        properties.load(propsFile.newDataInputStream())
        def major = properties.getProperty("versionMajor") as String
        def minor = properties.getProperty("versionMinor") as String
        def patch = properties.getProperty("versionPatch") as String
        def build = properties.getProperty("versionBuild") as String

        def version = major + "." + minor
        if (build != "0") {
            version += "." + patch + "." + build
        } else if (patch != "0") {
            version += "." + patch
        }
        return version

    } else {
        throw new GradleException("Versionname : unable to find gradle.properties file : \n" + propsFile.absolutePath)
    }
}
